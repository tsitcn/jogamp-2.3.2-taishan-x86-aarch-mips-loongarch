<?xml version="1.0" encoding="UTF-8"?>

<!-- Current minimum requirements are:
        - Java 1.6 (Level 6.0)
        - Android SDK API Level 9 (Version 2.3 Gingerbread)

     Official production builds are performed w/ Java 1.6.
        - Java 1.6 (Level 6.0)
        - Android SDK API Level 9 (Version 2.3 Gingerbread)

     Android supports Java language level 6.0.
     Nevertheless, it cannot be guaranteed whether the Android API
     supports all classes and methods of Java 1.6.
     It is required for JogAmp developers to validate Android compatibility
     by an Android crosscompilation build.

     Current GlueGen code utilizes some minor Java 1.6 features
     which could be replaced, however it's not desired at this point
     since we have no mode hard Java 1.5 constraints.
  -->

<project name="jogamp-env" basedir=".">

  <target name="jogamp.env.validation">
    <echo message="ant.version                ${ant.version}"/>
    <echo message="ant.java.version           ${ant.java.version}"/>
    <echo message="java.version               ${java.version}"/>
    <echo message="java.home                  ${java.home}"/>

    <property name="jvmJava.exe" value="${java.home}/bin/java" /> <!-- the java jvm executable for unit tests -->
    <echo message="jvmJava.exe                ${jvmJava.exe}"/>

    <condition property="jvmJava7.exe" value="${env.JAVA7_EXE}">
        <not>
         <equals arg1="${env.JAVA7_EXE}" arg2="$${env.JAVA7_EXE}" casesensitive="true" />
        </not>
    </condition>
    <echo message="jvmJava7.exe               ${jvmJava7.exe}"/> <!-- optional extra Java7 JVM for unit tests -->

    <fail message="Please build using Ant 1.8.0 or higher.">
      <condition>
          <not>
              <antversion atleast="1.8.0"/>
          </not>
      </condition>
    </fail>

    <fail message="Unsupported Java version: ${ant.java.version}. Make sure that the version of the Java compiler is 1.6 (6.0) or greater.">
        <condition>
            <not>
                <or>
                    <equals arg1="${ant.java.version}" arg2="1.6"/>
                    <equals arg1="${ant.java.version}" arg2="1.7"/>
                    <equals arg1="${ant.java.version}" arg2="1.8"/>
                    <equals arg1="${ant.java.version}" arg2="1.9"/>
                    <equals arg1="${ant.java.version}" arg2="2.0"/>
                    <equals arg1="${ant.java.version}" arg2="2.1"/>
                </or>
            </not>
        </condition>
    </fail>

  </target>

  <target name="jogamp.env.init" depends="jogamp.env.validation">
    <property environment="env" />

    <tstamp>
        <format property="version.timestamp" pattern="yyyyMMdd"/>
    </tstamp>

    <condition property="javadoc.xarg1" value="-Xdoclint:none" else="-J-Ddummy=val">
        <or>
            <equals arg1="${ant.java.version}" arg2="1.8"/>
            <equals arg1="${ant.java.version}" arg2="1.9"/>
            <equals arg1="${ant.java.version}" arg2="2.0"/>
            <equals arg1="${ant.java.version}" arg2="2.1"/>
        </or>
    </condition>
    <echo message="javadoc.xarg1              ${javadoc.xarg1}"/>

    <condition property="jogamp.jar.codebase" value="${env.JOGAMP_JAR_CODEBASE}">
        <not>
         <equals arg1="${env.JOGAMP_JAR_CODEBASE}" arg2="$${env.JOGAMP_JAR_CODEBASE}" casesensitive="true" />
        </not>
    </condition>
    <property name="jogamp.jar.codebase"      value=""/> <!-- A jogamp build uses value "Codebase: *.jogamp.org" -->
    <echo message="jogamp.jar.codebase        ${jogamp.jar.codebase}"/>

    <property name="jogamp.version.major" value="2"/>
    <property name="jogamp.version.minor" value="3"/>
    <property name="jogamp.version.submi" value="2"/>
    <!-- property name="jogamp.version.devel" value="-rc-${version.timestamp}"/ --> <!-- Devel RC Tag -->
    <property name="jogamp.version.devel" value=""/> <!-- Release tag -->
    <property name="jogamp.version.base"  value="${jogamp.version.major}.${jogamp.version.minor}"/>
    <property name="jogamp.version"       value="${jogamp.version.base}.${jogamp.version.submi}${jogamp.version.devel}" />
    <echo message="jogamp.version             ${jogamp.version}"/>

    <!-- This is the Android version: xxyyzzz, xx=API yy screen-from-to zzz app-version-->
    <property name="jogamp.version.int"   value="0914019"/>
    <echo message="jogamp.version.int         ${jogamp.version.int}"/>

    <!-- only set 'junit.is.disabled' if set in environment as 'true' to disable JUNIT tests -->
    <condition property="junit.is.disabled" value="${env.JUNIT_DISABLED}">
        <istrue value="${env.JUNIT_DISABLED}"/>
    </condition>
    <echo message="junit.is.disabled          ${junit.is.disabled}"/>

    <condition property="junit.run.arg0" value="${env.JUNIT_RUN_ARG0}">
        <not>
         <equals arg1="${env.JUNIT_RUN_ARG0}" arg2="$${env.JUNIT_RUN_ARG0}" casesensitive="true" />
        </not>
    </condition>
    <property name="junit.run.arg0"       value="-Djunit.run.arg0=dummy" />      <!-- default dummy values -->
    <condition property="junit.run.arg1" value="${env.JUNIT_RUN_ARG1}">
        <not>
         <equals arg1="${env.JUNIT_RUN_ARG1}" arg2="$${env.JUNIT_RUN_ARG1}" casesensitive="true" />
        </not>
    </condition>
    <property name="junit.run.arg1"       value="-Djunit.run.arg1=dummy" />      <!-- default dummy values -->

    <!-- only set 'build.archiveon' if set in environment as 'true' to trigger archive creation -->
    <condition property="build.archiveon" value="${env.BUILD_ARCHIVE}">
        <istrue value="${env.BUILD_ARCHIVE}"/>
    </condition>

    <condition property="build.node.name" value="${env.NODE_NAME}" else="local">
        <not>
         <equals arg1="${env.NODE_NAME}" arg2="$${env.NODE_NAME}" casesensitive="true" />
        </not>
    </condition>

    <condition property="android.version" value="${env.ANDROID_VERSION}" else="9">
        <not>
         <equals arg1="${env.ANDROID_VERSION}" arg2="$${env.ANDROID_VERSION}" casesensitive="true" />
        </not>
    </condition>

    <condition property="target.sourcelevel" value="${env.SOURCE_LEVEL}">
        <not>
         <equals arg1="${env.SOURCE_LEVEL}" arg2="$${env.SOURCE_LEVEL}" casesensitive="true" />
        </not>
    </condition>

    <condition property="target.targetlevel" value="${env.TARGET_LEVEL}">
        <not>
         <equals arg1="${env.TARGET_LEVEL}" arg2="$${env.TARGET_LEVEL}" casesensitive="true" />
        </not>
    </condition>

    <condition property="target.rt.jar" value="${env.TARGET_RT_JAR}">
        <not>
         <equals arg1="${env.TARGET_RT_JAR}" arg2="$${env.TARGET_RT_JAR}" casesensitive="true" />
        </not>
    </condition>

    <fail message="You need to specify all properties 'target.sourcelevel', 'target.targetlevel' and 'target.rt.jar' or none at all.">
      <condition>
        <and>
            <or>
              <isset property="target.sourcelevel"/>
              <isset property="target.targetlevel"/>
              <isset property="target.rt.jar"/>
            </or>
            <not>
              <and>
                  <isset property="target.sourcelevel"/>
                  <isset property="target.targetlevel"/>
                  <isset property="target.rt.jar"/>
              </and>
            </not>
        </and>
      </condition>
    </fail>

    <condition property="target.user.set" value="true">
          <and>
              <isset property="target.sourcelevel"/>
              <isset property="target.targetlevel"/>
              <isset property="target.rt.jar"/>
          </and>
    </condition>

    <property name="target.sourcelevel"       value="${ant.java.version}" />      <!-- default fallback values -->
    <property name="target.targetlevel"       value="${ant.java.version}" />      <!-- default fallback values -->
    <!-- Default value for std Java (incl. Java7 on OS X) -->
    <condition property="target.rt.jar"
               value="${java.home}/lib/rt.jar">
               <available file="${java.home}/lib/rt.jar"/>
    </condition>
    <!-- Default fallback value for Java6 OS X -->
    <condition property="target.rt.jar"
               value="${java.home}/../Classes/classes.jar">
               <available file="${java.home}/../Classes/classes.jar"/>
    </condition>
    <!-- Default fallback value on std Java -->
    <echo message="target.user.set            ${target.user.set}"/>
    <echo message="target.sourcelevel         ${target.sourcelevel}"/>
    <echo message="target.targetlevel         ${target.targetlevel}"/>
    <echo message="target.rt.jar              ${target.rt.jar}"/>
    <fail message="No target.rt.jar specified not found.">
      <condition>
        <not>
          <isset property="target.rt.jar"/>
        </not>
      </condition>
    </fail>

    <property name="host.sourcelevel"         value="${ant.java.version}" />      <!-- default values for compile time components -->
    <property name="host.targetlevel"         value="${ant.java.version}" />      <!-- default values for compile time components -->
    <!-- Default value for std Java (incl. Java7 on OS X) -->
    <condition property="host.rt.jar"
               value="${java.home}/lib/rt.jar">
               <available file="${java.home}/lib/rt.jar"/>
    </condition>
    <!-- Default fallback value for Java6 OS X -->
    <condition property="host.rt.jar"
               value="${java.home}/../Classes/classes.jar">
               <available file="${java.home}/../Classes/classes.jar"/>
    </condition>
    <echo message="host.sourcelevel           ${host.sourcelevel}"/>
    <echo message="host.targetlevel           ${host.targetlevel}"/>
    <echo message="host.rt.jar                ${host.rt.jar}"/>
    <fail message="No host.rt.jar specified not found.">
      <condition>
        <not>
          <isset property="host.rt.jar"/>
        </not>
      </condition>
    </fail>

    <fail message="Unsupported Target Java version (sourcelevel): ${target.sourcelevel}. Make sure that the version of the Java compiler is 1.6 (6.0) or greater.">
        <condition>
            <not>
                <or>
                    <contains string="${target.sourcelevel}" substring="1.6" casesensitive="false" />
                    <contains string="${target.sourcelevel}" substring="1.7" casesensitive="false" />
                    <contains string="${target.sourcelevel}" substring="1.8" casesensitive="false" />
                    <contains string="${target.sourcelevel}" substring="1.9" casesensitive="false" />
                    <contains string="${target.sourcelevel}" substring="2.0" casesensitive="false" />
                    <contains string="${target.sourcelevel}" substring="2.1" casesensitive="false" />
                </or>
            </not>
        </condition>
    </fail>
    <fail message="Unsupported Target Java version (targetlevel): ${target.targetlevel}. Make sure that the version of the Java compiler is 1.6 (6.0) or greater.">
        <condition>
            <not>
                <or>
                    <contains string="${target.targetlevel}" substring="1.6" casesensitive="false" />
                    <contains string="${target.targetlevel}" substring="1.7" casesensitive="false" />
                    <contains string="${target.targetlevel}" substring="1.8" casesensitive="false" />
                    <contains string="${target.targetlevel}" substring="1.9" casesensitive="false" />
                    <contains string="${target.targetlevel}" substring="2.0" casesensitive="false" />
                    <contains string="${target.targetlevel}" substring="2.1" casesensitive="false" />
                </or>
            </not>
        </condition>
    </fail>

    <property name="javacdebug"       value="true" /> 
    <property name="javacdebuglevel"  value="source,lines" /> 
    <!--property name="javacdebuglevel"  value="source,lines,vars" /--> 
    <!-- property name="javac.memorymax"  value="128m" /-->  <!-- I ran out of memory with these .. linux x86_64 6u14 -->
    <property name="javac.memorymax"  value="1024m" /> 

    <echo message="javacdebug                 ${javacdebug}"/>
    <echo message="javacdebuglevel            ${javacdebuglevel}"/>
    <echo message="javac.memorymax            ${javac.memorymax}"/>

    <echo message="build.archiveon            ${build.archiveon}"/>
    <echo message="build.node.name            ${build.node.name}"/>

    <echo message="android.version            ${android.version}"/>

    <echo message="junit.run.arg0             ${junit.run.arg0}"/>
    <echo message="junit.run.arg1             ${junit.run.arg1}"/>

    <condition property="macosx.sdkroot" value="${env.SDKROOT}">
        <not>
         <equals arg1="${env.SDKROOT}" arg2="$${env.SDKROOT}" casesensitive="true" />
        </not>
    </condition>
    <echo message="macosx.sdkroot             ${macosx.sdkroot}"/>

  </target>

</project>
